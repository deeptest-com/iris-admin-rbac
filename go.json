{
  // Place your snippets for go here. Each snippet is defined under a snippet name and has a prefix, body and 
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Print iris-admin controller": {
    "prefix": "iac",
    "body": [
      "// $1 $2",
      "func $1(ctx *gin.Context) {",
      "  req := &ReqPaginate{}",
      "  if errs := ctx.ShouldBind(&req); errs != nil {",
      "    response.FailWithMessage(errs.Error(), ctx)",
      "    return",
      "  }",
      "  items := &PageResponse{}",
      "  var scopes []func(db *gorm.DB) *gorm.DB",
      "  total, err := items.Paginate(database.Instance(), req.PaginateScope(), scopes...)",
      "  if err != nil {",
      "    response.FailWithMessage(err.Error(), ctx)",
      "    return",
      "  }",
      "  response.OkWithData(response.PageResult{",
      "    List:     items.Item,",
      "    Total:    total,",
      "    Page:     req.Page,",
      "    PageSize: req.PageSize,",
      "  }, ctx)",
      "}",
    ],
    "description": "Print iris-admin controller"
  },
  "Print iris-admin scope": {
    "prefix": "ias",
    "body": [
      "func $1Scope($2 $3) func(db *gorm.DB) *gorm.DB {",
      "  return func(db *gorm.DB) *gorm.DB {",
      "    return db.Where(\"$4 =?\", $2)",
      "  }",
      "}",
    ],
    "description": "Print iris-admin scope"
  },
  "Print iris-admin route group": {
    "prefix": "iag",
    "body": [
      "import (",
      "  \"github.com/gin-gonic/gin\"",
      "  \"github.com/snowlyg/iris-admin-rbac/gin/middleware\"",
      ")",
      "//router.GET(\"/list\", All)",
      "//router.POST(\"/remark/:id\", Remark)",
      "func Group(app *gin.RouterGroup) {",
      "  router := app.Group(\"$1\", middleware.Auth(), middleware.CasbinHandler(), middleware.OperationRecord())",
      "  {",
      "    $2",
      "  }",
      "}",
    ],
    "description": "Print iris-admin route group"
  },
  "Print iris-admin migrate": {
    "prefix": "iami",
    "body": [
      "func GetMigration() *gormigrate.Migration {",
      "  return &gormigrate.Migration{",
      "    // 20211215120700_create_xxxxs_table",
      "    ID: \"$1\",",
      "    Migrate: func(tx *gorm.DB) error {",
      "      return tx.AutoMigrate(&$2{})",
      "    },",
      "    Rollback: func(tx *gorm.DB) error {",
      "      return tx.Migrator().DropTable(\"$3\")",
      "    },",
      "  }",
      "}"
    ],
    "description": "Print iris-admin route group"
  },
  "Print iris-admin model": {
    "prefix": "iam",
    "body": [
      "import (",
      "  \"time\"",
      "  \"gorm.io/gorm\"",
      ")",
      "type $1 struct {",
      "  gorm.Model",
      "  Base$1",
      "}",
      "type Base$1 struct {",
      "  $3",
      "}",
    ],
    "description": "Print iris-admin model"
  },
  "Print iris-admin request": {
    "prefix": "iareq",
    "body": [
      "import (",
      "  \"github.com/gin-gonic/gin\"",
      "  \"github.com/snowlyg/iris-admin/server/database/orm\"",
      "  \"github.com/snowlyg/iris-admin/server/zap_server\"",
      ")",
      "type Request struct {",
      "  Base$1",
      "}",
      "func (req *Request) Request(ctx *gin.Context) error {",
      "  if err := ctx.ShouldBindJSON(req); err != nil {",
      "    zap_server.ZAPLOG.Error(err.Error())",
      "    return orm.ErrParamValidate",
      "  }",
      "  return nil",
      "}",
      "type ReqPaginate struct {",
      "  orm.Paginate",
      "  $2",
      "}"
    ],
    "description": "Print iris-admin request"
  },
  "Print iris-admin response": {
    "prefix": "iares",
    "body": [
      "import (",
      "  \"github.com/gin-gonic/gin\"",
      "  \"github.com/snowlyg/iris-admin/server/database/orm\"",
      "  \"github.com/snowlyg/iris-admin/server/zap_server\"",
      ")",
      "type Response struct {",
      "  orm.Model",
      "  Base$1",
      "}",
      "func (res *Response) First(db *gorm.DB, scopes ...func(db *gorm.DB) *gorm.DB) error {",
      "  db = db.Model(&$2{})",
      "  if len(scopes) > 0 {",
      "    db.Scopes(scopes...)",
      "  }",
      "  err := db.First(res).Error",
      "  if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {",
      "    zap_server.ZAPLOG.Error(err.Error())",
      "    return err",
      "  }",
      "  return nil",
      "}",
      "// Paginate",
      "type PageResponse struct {",
      "  Item []*Response",
      "}",
      "func (res *PageResponse) Paginate(db *gorm.DB, pageScope func(db *gorm.DB) *gorm.DB, scopes ...func(db *gorm.DB) *gorm.DB) (int64, error) {",
      "  db = db.Model(&$2{})",
      "  if len(scopes) > 0 {",
      "    db.Scopes(scopes...)",
      "  }",
      "  var count int64",
      "  err := db.Count(&count).Error",
      "  if err != nil {",
      "    zap_server.ZAPLOG.Error(err.Error())",
      "    return 0, err",
      "   }",
      "  db.Scopes(pageScope)",
      "  err = db.Find(&res.Item).Error",
      "  if err != nil {",
      "    zap_server.ZAPLOG.Error(err.Error())",
      "    return 0, err",
      "  }",
      "  return count, nil",
      "}",
      "func (res *PageResponse) Find(db *gorm.DB, scopes ...func(db *gorm.DB) *gorm.DB) error {",
      "  db = db.Model(&$2{})",
      "  if len(scopes) > 0 {",
      "    db.Scopes(scopes...)",
      "  }",
      "  err := db.Find(&res.Item).Error",
      "  if err != nil {",
      "    zap_server.ZAPLOG.Error(err.Error())",
      "    return err",
      "  }",
      "  return nil",
      "}",
    ],
    "description": "Print iris-admin response"
  },
}